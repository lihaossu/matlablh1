clear all; close all; clc

%% Initialize
% Number of Measurement Data
N = [10:10:100];
% Number of Frame
F = 1000;
% Deviation of Measurement
D = 100;
% Deviation of Real Data
R = 100;

% Dummy
NLJD = zeros(F,1);
NLJD_Fuzzy = zeros(F,1);
Detection = zeros(F,1);
Err_Acc = zeros(length(N),1);

%% Simulation Part
progressbar;

for idx_Simulation = 1:length(N)
    
    for idx_F = 1:F
        Real_Data = ceil(R*rand(1,2)+[500 500]);
        
        if Real_Data(1) > Real_Data(2)
            % Device
            NLJD = 0;
            % Metal
        else NLJD = 1;
        end;
        
        for idx_N = 1:N(idx_Simulation)
            Measurement_Data(idx_N,:) = ceil(D*randn(1,2)+Real_Data);
        end;
        
        % Fuzzy Center
        [center,U,objFcn] = fcm_1(Measurement_Data,2);
        Fuzzy_center = sum(center)/2;
        if Fuzzy_center(1) > Fuzzy_center(2)
            % Device
            NLJD_Fuzzy_Center = 0;
            % Metal
        else NLJD_Fuzzy_Center = 1;
        end;
        
        % Fuzzy Distance
        
        
        % Averaging
        Averaging = sum(Measurement_Data)/N(idx_Simulation);
        if Averaging(1) > Averaging(2)
            % Device
            NLJD_Averaging = 0;
            % Metal
        else NLJD_Averaging = 1;
        end;
        
        % Detection
        Detection1(idx_F) = xor(NLJD,NLJD_Fuzzy_Center);
       
        Detection3(idx_F) = xor(NLJD,NLJD_Averaging);
        
        % Progressbar Count
        progress_count = idx_F/F;
        % Do something important
        pause(0.01)
        % Update figure
        progressbar(((idx_Simulation-1)+progress_count)/(length(N)));
        
    end;
    
    Err_Acc1(idx_Simulation) = sum(Detection1);
    Err_Acc2(idx_Simulation) = sum(Detection2);
    Err_Acc3(idx_Simulation) = sum(Detection3);
    
end;

Error1 = Err_Acc1/F*100;
Error2 = Err_Acc2/F*100;
Error3 = Err_Acc3/F*100;

Error = [Error1' Error2' Error3'];
bar(N,Error)

% axis([N(1)-3 N(length(N))+3 0 100])
xlabel('k');
ylabel('Classification Error Probability (%)');
grid on
legend('Fuzzy Center','Fuzzy Count','Averaging');