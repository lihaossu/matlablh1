clear all; close all; clc;

load Measure_40.mat
load Second_1.TXT
load Third_1.TXT

% A = ceil(sum(Class1(:,1:2))/length(Class1));
% B = ceil(sum(Class2(:,1:2))/length(Class2));
% C = ceil(A+B)/2;

Training_Junction = [Second_1 Third_1];
Training_Metal = [Third_1 Second_1];

% progressbar;
% kNN Factor
k = [3 5 7 9 11 13 15 17 19 21 23 25];

Measured = [Class1(:,1:2); Class2(:,1:2)];
Real = [Class1(:,3); Class2(:,3)];

for idx_k = 1:length(k)
    
    for idx_simulation = 1:length(Class1)+length(Class2)
        
        class = kNN(k(idx_k),Measured(idx_simulation,:),Training_Junction,Training_Metal);
        
        if Measured(idx_simulation,1) > Measured(idx_simulation,2)
            Decision_Level(idx_simulation) = 0; % NLJD
        elseif Measured(idx_simulation,1) < Measured(idx_simulation,2)
            Decision_Level(idx_simulation) = 1; % Metal
        end;
        
 
        %             progress_count = idx_simulation/length(A);
        %             % Do something important
        %             pause(0.01)
        %             % Update figure
        %             progressbar(((idx_k-1)*frame+((idx_frame-1)+progress_count))/(length(k)*frame));
       
               
    end;
    
    DL = Decision_Level'
    
    Err_DL = sum(xor(Real,DL));
    Err_kNN = sum(xor(Real,class));
    
    Probability_DL(idx_k) = Err_DL / (length(Class1)+length(Class2)) * 100;

end;

save Result_10.mat Result_10;

